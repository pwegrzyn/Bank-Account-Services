//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bank;

public class Credit implements java.lang.Cloneable,
                               java.io.Serializable
{
    public double rateOfForeignCurrencyDuringSigning;

    public Currency baseCurrency;

    public Currency foreignCurrency;

    public int creditPeriod;

    public int numberOfInstallments;

    public int numberOfCapitalizationPeriods;

    public double interestRate;

    public double commissionCostRate;

    public long valueOfBorrowedCapital;

    public long creditCostInBaseCurrency;

    public long creditCostInForeignCurrency;

    public Credit()
    {
        this.baseCurrency = Currency.PLN;
        this.foreignCurrency = Currency.PLN;
    }

    public Credit(double rateOfForeignCurrencyDuringSigning, Currency baseCurrency, Currency foreignCurrency, int creditPeriod, int numberOfInstallments, int numberOfCapitalizationPeriods, double interestRate, double commissionCostRate, long valueOfBorrowedCapital, long creditCostInBaseCurrency, long creditCostInForeignCurrency)
    {
        this.rateOfForeignCurrencyDuringSigning = rateOfForeignCurrencyDuringSigning;
        this.baseCurrency = baseCurrency;
        this.foreignCurrency = foreignCurrency;
        this.creditPeriod = creditPeriod;
        this.numberOfInstallments = numberOfInstallments;
        this.numberOfCapitalizationPeriods = numberOfCapitalizationPeriods;
        this.interestRate = interestRate;
        this.commissionCostRate = commissionCostRate;
        this.valueOfBorrowedCapital = valueOfBorrowedCapital;
        this.creditCostInBaseCurrency = creditCostInBaseCurrency;
        this.creditCostInForeignCurrency = creditCostInForeignCurrency;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Credit r = null;
        if(rhs instanceof Credit)
        {
            r = (Credit)rhs;
        }

        if(r != null)
        {
            if(this.rateOfForeignCurrencyDuringSigning != r.rateOfForeignCurrencyDuringSigning)
            {
                return false;
            }
            if(this.baseCurrency != r.baseCurrency)
            {
                if(this.baseCurrency == null || r.baseCurrency == null || !this.baseCurrency.equals(r.baseCurrency))
                {
                    return false;
                }
            }
            if(this.foreignCurrency != r.foreignCurrency)
            {
                if(this.foreignCurrency == null || r.foreignCurrency == null || !this.foreignCurrency.equals(r.foreignCurrency))
                {
                    return false;
                }
            }
            if(this.creditPeriod != r.creditPeriod)
            {
                return false;
            }
            if(this.numberOfInstallments != r.numberOfInstallments)
            {
                return false;
            }
            if(this.numberOfCapitalizationPeriods != r.numberOfCapitalizationPeriods)
            {
                return false;
            }
            if(this.interestRate != r.interestRate)
            {
                return false;
            }
            if(this.commissionCostRate != r.commissionCostRate)
            {
                return false;
            }
            if(this.valueOfBorrowedCapital != r.valueOfBorrowedCapital)
            {
                return false;
            }
            if(this.creditCostInBaseCurrency != r.creditCostInBaseCurrency)
            {
                return false;
            }
            if(this.creditCostInForeignCurrency != r.creditCostInForeignCurrency)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::bank::Credit");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rateOfForeignCurrencyDuringSigning);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, creditPeriod);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, numberOfInstallments);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, numberOfCapitalizationPeriods);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, interestRate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, commissionCostRate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, valueOfBorrowedCapital);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, creditCostInBaseCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, creditCostInForeignCurrency);
        return h_;
    }

    public Credit clone()
    {
        Credit c = null;
        try
        {
            c = (Credit)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeDouble(this.rateOfForeignCurrencyDuringSigning);
        Currency.ice_write(ostr, this.baseCurrency);
        Currency.ice_write(ostr, this.foreignCurrency);
        ostr.writeInt(this.creditPeriod);
        ostr.writeInt(this.numberOfInstallments);
        ostr.writeInt(this.numberOfCapitalizationPeriods);
        ostr.writeDouble(this.interestRate);
        ostr.writeDouble(this.commissionCostRate);
        ostr.writeLong(this.valueOfBorrowedCapital);
        ostr.writeLong(this.creditCostInBaseCurrency);
        ostr.writeLong(this.creditCostInForeignCurrency);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.rateOfForeignCurrencyDuringSigning = istr.readDouble();
        this.baseCurrency = Currency.ice_read(istr);
        this.foreignCurrency = Currency.ice_read(istr);
        this.creditPeriod = istr.readInt();
        this.numberOfInstallments = istr.readInt();
        this.numberOfCapitalizationPeriods = istr.readInt();
        this.interestRate = istr.readDouble();
        this.commissionCostRate = istr.readDouble();
        this.valueOfBorrowedCapital = istr.readLong();
        this.creditCostInBaseCurrency = istr.readLong();
        this.creditCostInForeignCurrency = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Credit v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Credit ice_read(com.zeroc.Ice.InputStream istr)
    {
        Credit v = new Credit();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Credit> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Credit v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Credit> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Credit.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Credit _nullMarshalValue = new Credit();

    /** @hidden */
    public static final long serialVersionUID = -630411677L;
}
